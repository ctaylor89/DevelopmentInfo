https://dotnetfiddle.net/srx9kM

using System;
using System.Collections.Generic;

namespace SolutionName.ProjectName
{					
	public class Program
	{
		public static void Main()
		{
			Console.WriteLine("Working with Lists, arrays and static method in a non-static class");
		
			int[] scores = {1, 2, 3, 4, 5, 6, 765};		
		
			// To call a static method, use the class name even though the class is not static
			var gradeScores = ProcessList.GetGradesList(scores);
		
			foreach(int s in gradeScores)
				Console.WriteLine($"Grade score: {s}");
		}
	
		// Class does not have to be static, even with a static method. Can only use private when nested in another class.
		private class ProcessList
		{
			public static List<int> GetGradesList(int[] scores)
			{
				var grades = new List<int>();
				grades.AddRange(scores);
				grades.InsertRange(4, new int[] {20, 21, 22});
				return grades;
			}
		}
	}
}
-------------------------------------------------------------------
using System;
					
public class Program
{
	public static void Main()
	{
		// Option 1  Call static func using containing class's names
		//double MathAddResult = MathCalc.MathWork.AddNums(78, 183);
		//Console.WriteLine($"Add Numbers: 78 and 183 = {MathAddResult}  {DateTime.Now}");		
		
		// Option 2 Call static func using object instance
		var MathAddObj = new MathCalc.MathWork();
		double MathAddResult = MathAddObj.AddNums(78, 183);
		Console.WriteLine("Add Numbers: 78 and 183 = {0}  {1}", MathAddResult, DateTime.Now);
	}
}

public static class MathCalc 
{
	private static int Val01 = 100;
	
	// This class does not have to be static
	public class MathWork
	{
		static int Val02 = 200;
		
		// This method does have to be static for the first option above
		public double AddNums(int num1, int num2)
		{
			double val;
			//bool res = double.TryParse("300", out val); //Convert.ToDouble(num1 + num2);
			return Val02 + (double.TryParse("300N", out val) ? val : 0);
		}
	}	
}
-----------------------------------------------------------------
using System;
using System.Linq;
					
public class Program
{
	public static void Main()
	{
		// A simple data source.
        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };

        // Create the query.
        // lowNums is an IEnumerable<int>
        var lowNums = numbers.Select(n => n).Where(n => n < 9).OrderBy(n => n);
        var lowNums2 = numbers.Where(n => n < 9).Select(n => n).OrderBy(n => n);  
		var lowNums3 = from n in numbers where n < 9 orderby n select n;
		
        // Execute the query.
        foreach (int i in lowNums)
        {
            Console.Write(i + " ");
        }
		
		Console.WriteLine();
		foreach (int i in lowNums2)
        {
            Console.Write(i + " ");
        }
		
		Console.WriteLine();
		foreach (int i in lowNums3)
        {
            Console.Write(i + " ");
        }
	}
}


-----------------------------------------------------------------
// Left off with this code
using System;
using System.Collections.Genric;
					
public class Program
{
	private static const string = "Airplanes in the Alley";

	public static void Main()
	{
		
		WriteLine("Start Data Manipulation");

		//**** Make function calls 

	}
}

public static class DataManipulate
{	
	public static char[] ReturnCharsInArray(string input)
	{
		var output = new char[input.Length];
		var retCharArray = new string[input.Length];
		
		for(int i = 0; i < input.Length; i++)
		{
			retCharArray[i] = input[i];
		}
		
		return retCharArray[i];
	}

	public static string[] ReturnWordsInArray(string input)
	{
		var string[] = input.split(' ');
		return string[];
	}
}